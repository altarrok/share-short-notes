// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    notes         Note[]
    accounts      Account[]
    sessions      Session[]
}

model Note {
    id                String           @id @default(auto()) @map("_id") @db.ObjectId
    userId            String           @db.ObjectId
    title             String
    content           String
    archived          Boolean          @default(false)
    user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    tagNames          String[]
    tags              Tag[]            @relation(fields: [tagNames], references: [name])
    sharingEnabled    Boolean          @default(false)
    sharedPermissions NotePermission[] @default([])
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
}

model Tag {
    name    String   @id @map("_id")
    noteIds String[] @db.ObjectId
    notes   Note[]   @relation(fields: [noteIds], references: [id])
}

enum NotePermission {
    EDIT
    ARCHIVE
    DELETE
}
